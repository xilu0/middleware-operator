apiVersion: v1
kind: Service
metadata:
  labels:
    app: mysql
  name: mysql
spec:
  ports:
  - name: mysql
    port: 3306
  clusterIP: None
  selector:
    app: mysql
---
  apiVersion: v1
  data:
    mysqld.cnf: |
      [mysqld]
      pid-file        = /var/run/mysqld/mysqld.pid
      socket          = /var/run/mysqld/mysqld.sock
      datadir         = /var/lib/mysql
      disabled_storage_engines="MyISAM,BLACKHOLE,FEDERATED,ARCHIVE,MEMORY"
      gtid_mode=ON
      enforce_gtid_consistency=ON
      binlog_checksum=NONE
      log_bin=binlog
      log_slave_updates=ON
      binlog_format=ROW
      master_info_repository=TABLE
      relay_log_info_repository=TABLE
      transaction_write_set_extraction=XXHASH64
      #组复制设置
      plugin_load_add='group_replication.so'
      group_replication_group_name="aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
      group_replication_start_on_boot=off
      # group_replication_local_address= "mysql-0:33061"
      group_replication_group_seeds= "s1:33061,s2:33061,s3:33061"
      group_replication_bootstrap_group=off
  kind: ConfigMap
  metadata:
    name: mysqlconf
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: mysql
  namespace: default
spec:
  serviceName: "mysql"
  replicas: 1
  selector:
    matchLabels:
      app: mysql
  template:
    metadata:
      creationTimestamp: null
      labels:
        app: mysql
    spec:
      containers:
      - env:
        - name: MYSQL_ROOT_PASSWORD
          value: root123
        image: mysql:5.7
        imagePullPolicy: IfNotPresent
        name: mysql
        command:
        - bash
        args:
        - -ce
        - |
          set -e
          cat >> //etc/mysql/mysql.conf.d/mysqld.cnf <<EOF
          disabled_storage_engines="MyISAM,BLACKHOLE,FEDERATED,ARCHIVE,MEMORY"
          gtid_mode=ON
          enforce_gtid_consistency=ON
          binlog_checksum=NONE
          log_bin=binlog
          log_slave_updates=ON
          binlog_format=ROW
          master_info_repository=TABLE
          relay_log_info_repository=TABLE
          transaction_write_set_extraction=XXHASH64
          plugin_load_add='group_replication.so'
          group_replication_group_name="aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
          group_replication_start_on_boot=off
          group_replication_local_address= "${HOSTNAME}.mysql:33061"
          group_replication_group_seeds= "mysql-0.mysql:33061,mysql-1.mysql:33061,mysql-2.mysql:33061"
          group_replication_ip_whitelist= "10.0.0.0/8,172.0.0.0/8,192.0.0.0/8"
          group_replication_bootstrap_group=off
          EOF
          /entrypoint.sh --server-id=1${HOSTNAME##*-}
        ports:
        - containerPort: 3306
          name: mysql
          protocol: TCP
        # volumeMounts:
        # - name: config
        #   mountPath: /etc/mysql/mysql.conf.d
        # lifecycle:
        #   postStart:
        #     exec:
        #       command:
        #       - bash
        #       - -ce
        #       - |
        #         sleep 60
        #         # mysql -u root -p$MYSQL_ROOT_PASSWORD -e "
        #         # CREATE DATABASE test;
        #         # USE test;
        #         # CREATE TABLE t1 (c1 INT PRIMARY KEY, c2 TEXT NOT NULL);
        #         # INSERT INTO t1 VALUES (1, 'Luis');
        #         # SELECT * FROM t1;
        #         # "
        #         echo $HOSTNAME > /log
        #         env > /env
        #         mysql -u root -p$MYSQL_ROOT_PASSWORD -e "
        #         SET SQL_LOG_BIN=0;
        #         CREATE USER rpl_user@'%' IDENTIFIED BY 'password';
        #         GRANT REPLICATION SLAVE ON *.* TO rpl_user@'%';
        #         SET SQL_LOG_BIN=1;
        #         FLUSH PRIVILEGES;
        #         CHANGE MASTER TO MASTER_USER='rpl_user', MASTER_PASSWORD='password' FOR CHANNEL 'group_replication_recovery';
        #         "
        #         if [[ $HOSTNAME =~ -0 ]]
        #         then
        #             mysql -u root -p$MYSQL_ROOT_PASSWORD -e "
        #             SET GLOBAL group_replication_bootstrap_group=ON;
        #             START GROUP_REPLICATION;
        #             SET GLOBAL group_replication_bootstrap_group=OFF;
        #             "
        #         else
        #             mysql -u root -p$MYSQL_ROOT_PASSWORD -e "
        #             reset master;
        #             START GROUP_REPLICATION;
        #             "
        #         fi
        #         mysql -u root -p$MYSQL_ROOT_PASSWORD -e "
        #         SELECT * FROM performance_schema.replication_group_members;
        #         "
      dnsPolicy: ClusterFirst
      dnsConfig:
        searches:
          - mysql.default.svc.cluster.local
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      terminationGracePeriodSeconds: 30
      # volumes:
      # - name: config
      #   configMap:
      #       name: mysqlconf
---
# kubectl apply -f config/samples/mysql_statefulset.yaml 
# kubectl scale statefulset mysql --replicas=1
# 
# mysql -u root -p$MYSQL_ROOT_PASSWORD -e "
# stop GROUP_REPLICATION;
# SELECT * FROM performance_schema.replication_group_members;
# "
# mysql -u root -p$MYSQL_ROOT_PASSWORD -e "
# start GROUP_REPLICATION;
# SELECT * FROM performance_schema.replication_group_members;
# "
