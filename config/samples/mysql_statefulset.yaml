apiVersion: v1
kind: Service
metadata:
  labels:
    app: mysql
  name: mysql
spec:
  ports:
  - name: mysql
    port: 3306
  clusterIP: None
  selector:
    app: mysql
---
  apiVersion: v1
  data:
    mysqld.cnf: |
      [mysqld]
      pid-file        = /var/run/mysqld/mysqld.pid
      socket          = /var/run/mysqld/mysqld.sock
      datadir         = /var/lib/mysql
      disabled_storage_engines="MyISAM,BLACKHOLE,FEDERATED,ARCHIVE,MEMORY"
      gtid_mode=ON
      enforce_gtid_consistency=ON
      binlog_checksum=NONE
      log_bin=binlog
      log_slave_updates=ON
      binlog_format=ROW
      master_info_repository=TABLE
      relay_log_info_repository=TABLE
      transaction_write_set_extraction=XXHASH64
      #组复制设置
      plugin_load_add='group_replication.so'
      group_replication_group_name="aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
      group_replication_start_on_boot=off
      # group_replication_local_address= "mysql-0:33061"
      group_replication_group_seeds= "s1:33061,s2:33061,s3:33061"
      group_replication_bootstrap_group=off
  kind: ConfigMap
  metadata:
    name: mysqlconf
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: mysql
  namespace: default
spec:
  serviceName: "mysql"
  replicas: 3
  selector:
    matchLabels:
      app: mysql
  template:
    metadata:
      creationTimestamp: null
      labels:
        app: mysql
    spec:
      containers:
      - env:
        - name: MYSQL_ROOT_PASSWORD
          value: root123
        image: heishui/mysql:5.7-ping
        imagePullPolicy: IfNotPresent
        name: mysql
        command:
        - bash
        args:
        - -ce
        - |
          set -e
          cat >> //etc/mysql/mysql.conf.d/mysqld.cnf <<EOF
          disabled_storage_engines="MyISAM,BLACKHOLE,FEDERATED,ARCHIVE,MEMORY"
          gtid_mode=ON
          enforce_gtid_consistency=ON
          binlog_checksum=NONE
          log_bin=binlog
          log_slave_updates=ON
          binlog_format=ROW
          master_info_repository=TABLE
          relay_log_info_repository=TABLE
          transaction_write_set_extraction=XXHASH64
          plugin_load_add='group_replication.so'
          group_replication_group_name="aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
          group_replication_start_on_boot=off
          group_replication_local_address= "${HOSTNAME}:33061"
          group_replication_group_seeds= "mysql-0:33061,mysql-1:33061,mysql-2:33061"
          group_replication_ip_whitelist= "10.0.0.0/8,172.0.0.0/8,192.0.0.0/8"
          group_replication_bootstrap_group=off
          EOF
          /entrypoint.sh --server-id=1${HOSTNAME##*-}
        ports:
        - containerPort: 3306
          name: mysql
          protocol: TCP
        # volumeMounts:
        # - name: config
        #   mountPath: /etc/mysql/mysql.conf.d
        volumeMounts:
          - name: data
            mountPath: /var/lib/mysql
      - env:
        - name: MYSQL_ROOT_PASSWORD
          value: root123
        image: heishui/mysql:5.7-ping
        imagePullPolicy: IfNotPresent
        name: sidecar
        command:
        - bash
        - -ce
        - |
          sleep 30
          mysql -u root -h 127.0.0.1 -p$MYSQL_ROOT_PASSWORD -e "
          CHANGE MASTER TO MASTER_USER='root', MASTER_PASSWORD='"$MYSQL_ROOT_PASSWORD"' FOR CHANNEL 'group_replication_recovery';
          "
          if [[ $HOSTNAME =~ -0 ]]
          then
              s1=$(mysql -h mysql-1  -u root -p$MYSQL_ROOT_PASSWORD -e "SELECT * FROM performance_schema.replication_group_members;" | grep -E  "ONLINE|RECOVERING" | wc -l)
              s2=$(mysql -h mysql-2  -u root -p$MYSQL_ROOT_PASSWORD -e "SELECT * FROM performance_schema.replication_group_members;" | grep -E  "ONLINE|RECOVERING" | wc -l)
              if [[ $s1 -ne 0 ||  $s2 -ne 0 ]] 
              then 
                  mysql -u root -h 127.0.0.1  -p$MYSQL_ROOT_PASSWORD -e "
                  START GROUP_REPLICATION;
                  "
              else
                  mysql -u root -h 127.0.0.1  -p$MYSQL_ROOT_PASSWORD -e "
                  SET GLOBAL group_replication_bootstrap_group=ON;
                  START GROUP_REPLICATION;
                  SET GLOBAL group_replication_bootstrap_group=OFF;
                  "
              fi
          else
              members=$(mysql -h 127.0.0.1  -u root -p$MYSQL_ROOT_PASSWORD -e "SELECT * FROM performance_schema.replication_group_members;")
              if [[ -z "$members" ]]
              then
                  mysql -h 127.0.0.1  -u root -p$MYSQL_ROOT_PASSWORD -e "
                  reset master;
                  set global group_replication_allow_local_disjoint_gtids_join=ON;
                  START GROUP_REPLICATION;
                  "
              else
                  mysql -h 127.0.0.1  -u root -p$MYSQL_ROOT_PASSWORD -e "
                  set global group_replication_allow_local_disjoint_gtids_join=ON;
                  START GROUP_REPLICATION;
                  "
              fi
          fi
          mysql -h 127.0.0.1  -u root -p$MYSQL_ROOT_PASSWORD -e "
          SELECT * FROM performance_schema.replication_group_members;
          SHOW STATUS LIKE 'group_replication_primary_member';
          "
          exec tail -f /dev/null
        volumeMounts:
        - name: data
          mountPath: /var/lib/mysql
      dnsPolicy: ClusterFirst
      dnsConfig:
        searches:
          - mysql.default.svc.cluster.local
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      terminationGracePeriodSeconds: 30
  volumeClaimTemplates:
  - metadata:
      name: data
    spec:
      accessModes: ["ReadWriteOnce"]
      resources:
        requests:
          storage: 10Gi
      # volumes:
      # - name: config
      #   configMap:
      #       name: mysqlconf
---
# kubectl apply -f config/samples/mysql_statefulset.yaml 
# kubectl scale statefulset mysql --replicas=1
# 
# mysql -u root -p$MYSQL_ROOT_PASSWORD -e "
# stop GROUP_REPLICATION;
# SELECT * FROM performance_schema.replication_group_members;
# "
# mysql -u root -p$MYSQL_ROOT_PASSWORD -e "
# start GROUP_REPLICATION;
# SELECT * FROM performance_schema.replication_group_members;
# "
# docker run -e MYSQL_HOST=localhost -e MYSQL_PORT=3306 -e MYSQL_USER=mysql -e MYSQL_PASSWORD=mysql -e MYSQL_INNODB_CLUSTER_MEMBERS=3 -ti mysql/mysql-router
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
  generation: 1
  labels:
    owner: wangyijie
  name: mysql-router
  namespace: default
spec:
  progressDeadlineSeconds: 600
  replicas: 1
  selector:
    matchLabels:
      cr: Mysql
      name: mysql-router
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  template:
    metadata:
      creationTimestamp: null
      labels:
        cr: Mysql
        name: mysql-router
    spec:
      containers:
      - env:
        - name: MYSQL_HOST
          value: mysql-0.mysql
        - name: MYSQL_PORT
          value: "3306"
        - name: MYSQL_USER
          value: root
        - name: MYSQL_PASSWORD
          value: root123
        - name: MYSQL_INNODB_CLUSTER_MEMBERS
          value: "3"
        image: mysql/mysql-router
        imagePullPolicy: IfNotPresent
        name: mysql
        ports:
        - containerPort: 6446
          name: mysql-rw
          protocol: TCP
        - containerPort: 6447
          name: mysql-or
          protocol: TCP
